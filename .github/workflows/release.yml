name: "Release Build"

on:
  push:
    tags:
      - "v*"

jobs:
  publish-tauri-desktop:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - platform: macos-latest
            args: --target universal-apple-darwin
          - platform: ubuntu-latest
            args: ""
          - platform: windows-latest
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf libx11-dev libxdo-dev libxcb-shape0-dev libxcb-xfixes0-dev

      - name: Install frontend dependencies
        run: yarn install

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: "anime-management ${{ github.ref_name }}"
          releaseBody: "See the assets to download and install this version."
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

  publish-tauri-android:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android, armv7-linux-androideabi, i686-linux-android, x86_64-linux-android

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Install dependencies (ubuntu)
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf libx11-dev libxdo-dev

      - name: Install frontend dependencies
        run: yarn install

      - name: Install Android SDK
        run: |
          mkdir -p $HOME/Android/Sdk
          ANDROID_TOOLS_URL="https://dl.google.com/android/repository/commandlinetools-linux-8092744_latest.zip"
          wget -O /tmp/android-tools.zip $ANDROID_TOOLS_URL
          unzip /tmp/android-tools.zip -d $HOME/Android/Sdk/cmdline-tools
          mv $HOME/Android/Sdk/cmdline-tools/cmdline-tools $HOME/Android/Sdk/cmdline-tools/latest
          $HOME/Android/Sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=$HOME/Android/Sdk "platform-tools" "platforms;android-33" "build-tools;33.0.1" "ndk;25.2.9519653"
          echo "ANDROID_HOME=$HOME/Android/Sdk" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$HOME/Android/Sdk" >> $GITHUB_ENV
          echo "NDK_HOME=$HOME/Android/Sdk/ndk/25.2.9519653" >> $GITHUB_ENV
          echo "$HOME/Android/Sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$HOME/Android/Sdk/platform-tools" >> $GITHUB_PATH

      # Set up environment variable to check if Android keystore exists
      - name: Check Android Keystore Secret
        run: |
          if [ -n "${{ secrets.ANDROID_KEYSTORE }}" ]; then
            echo "HAS_ANDROID_KEYSTORE=true" >> $GITHUB_ENV
          fi

      - name: Setup Android keystore
        if: env.HAS_ANDROID_KEYSTORE == 'true'
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > android.keystore
          echo "ANDROID_KEYSTORE_PATH=$PWD/android.keystore" >> $GITHUB_ENV

      - name: Install Tauri CLI and the mobile CLI plugin
        run: cargo install tauri-cli --version "^2.0.0-beta"

      - name: Install mobile dependencies
        run: |
          cargo tauri android init

      - name: Build Android APK (Debug)
        run: |
          cargo tauri android build --debug --verbose

      - name: Build Android APK (Release)
        if: env.HAS_ANDROID_KEYSTORE == 'true'
        run: |
          cargo tauri android build --release --verbose -- \
            --signing-key $ANDROID_KEYSTORE_PATH \
            --signing-key-pass ${{ secrets.ANDROID_KEYSTORE_PASSWORD }} \
            --key-alias ${{ secrets.ANDROID_KEY_ALIAS }} \
            --key-pass ${{ secrets.ANDROID_KEY_PASSWORD }}

      - name: Upload Android debug APK to release
        uses: softprops/action-gh-release@v1
        with:
          files: src-tauri/gen/android/app/build/outputs/apk/universal/debug/app-universal-debug.apk
          tag_name: ${{ github.ref_name }}
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Android release APK to release
        if: env.HAS_ANDROID_KEYSTORE == 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release.apk
          tag_name: ${{ github.ref_name }}
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-tauri-ios:
    permissions:
      contents: write
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-ios, aarch64-apple-ios-sim, x86_64-apple-ios

      - name: Install iOS dependencies
        run: |
          rustup target add aarch64-apple-ios aarch64-apple-ios-sim x86_64-apple-ios

      - name: Install frontend dependencies
        run: yarn install

      - name: Install Tauri CLI and the mobile CLI plugin
        run: cargo install tauri-cli --version "^2.0.0-beta"

      - name: Install mobile dependencies
        run: |
          cargo tauri ios init

      # Set up environment variable to check if Apple certificate exists
      - name: Check Apple Certificate Secret
        run: |
          if [ -n "${{ secrets.APPLE_CERTIFICATE }}" ]; then
            echo "HAS_APPLE_CERTIFICATE=true" >> $GITHUB_ENV
          fi

      # Import Apple certificate if available
      - name: Import Apple Certificate
        if: env.HAS_APPLE_CERTIFICATE == 'true'
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate and provisioning profile from secrets
          echo -n "${{ secrets.APPLE_CERTIFICATE }}" | base64 --decode -o $CERTIFICATE_PATH

          # Create temporary keychain
          security create-keychain -p "${{ secrets.APPLE_KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "${{ secrets.APPLE_KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo -n "${{ secrets.APPLE_PROVISIONING_PROFILE }}" | base64 --decode -o ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision

      - name: Build iOS App (Debug Simulator)
        run: |
          cargo tauri ios build --debug

      - name: Build iOS App (Debug Device)
        run: |
          cargo tauri ios build --debug --device

      - name: Build iOS App (Release)
        if: env.HAS_APPLE_CERTIFICATE == 'true'
        run: |
          cargo tauri ios build --release --device

      - name: Package as IPA (Debug)
        run: |
          cd src-tauri/gen/ios
          mkdir -p Payload
          cp -r build/Debug-iphoneos/anime-management.app Payload/
          zip -r anime-management-debug.ipa Payload

      - name: Package as IPA (Release)
        if: env.HAS_APPLE_CERTIFICATE == 'true'
        run: |
          cd src-tauri/gen/ios
          mkdir -p Payload
          cp -r build/Release-iphoneos/anime-management.app Payload/
          zip -r anime-management-release.ipa Payload

      - name: Upload iOS debug artifact to release
        uses: softprops/action-gh-release@v1
        with:
          files: src-tauri/gen/ios/anime-management-debug.ipa
          tag_name: ${{ github.ref_name }}
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload iOS release artifact to release
        if: env.HAS_APPLE_CERTIFICATE == 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: src-tauri/gen/ios/anime-management-release.ipa
          tag_name: ${{ github.ref_name }}
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
